{
  // TypeScript 관련 설정
  "typescript.preferences.importModuleSpecifier": "non-relative", // 상대 경로 대신 절대 경로로 모듈 임포트 경로 설정
  "typescript.enablePromptUseWorkspaceTsdk": true, // Workspace TypeScript SDK 사용 여부 설정
  "typescript.tsdk": "./node_modules/typescript/lib", // 로컬 TypeScript 버전 사용

  // Tailwind CSS 관련 설정
  "tailwindCSS.experimental.classRegex": [
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"], // 'cva' 함수 사용 시 클래스 인식
    ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], // 'cx' 함수 사용 시 클래스 인식
    ["cn\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], // 'cn' 함수 사용 시 클래스 인식
    "tw`([^`]*)", // tw 클래스 사용 시 인식
    "tw\\.[^`]+`([^`]*)`", // tw.접두어로 시작하는 클래스 사용 시 인식
    "tw\\(.*?\\).*?`([^`]*)", // tw()로 감싼 클래스 인식
    ["className\\s*:\\s*['\"`]([^'\"`]*)['\"`]"] // className 속성의 클래스 인식
  ],
  "tailwindCSS.classAttributes": [
    "className",
    "class",
    "cx",
    "cn",
    ".*ClassName",
    ".*className" // Tailwind CSS 클래스명으로 인식할 수 있는 속성 설정
  ],

  // 자동 포맷팅 및 코드 정리 관련 설정
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // JavaScript 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // JavaScript React 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // TypeScript 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // TypeScript React 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },

  // 에디터 관련 설정
  "editor.tabSize": 2, // 탭 크기를 2로 설정하여 코드 들여쓰기를 2칸으로 설정

  // SCSS 관련 설정
  "scss.lint.unknownAtRules": "ignore", // SCSS에서 인식되지 않은 @규칙을 무시

  // 커밋 메시지 설정
  "commit-message-editor.tokens": [
    {
      "label": "Type", // 변경 유형 설정
      "name": "type",
      "type": "enum", // 열거형 타입 설정
      "description": "Type of changes", // 변경 유형 설명
      "options": [
        { "label": "---", "value": "" }, // 기본 옵션
        {
          "label": "build",
          "description": "Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)"
        },
        {
          "label": "chore",
          "description": "Updating grunt tasks etc; no production code change"
        },
        {
          "label": "ci",
          "description": "Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)"
        },
        { "label": "docs", "description": "Documentation only changes" },
        { "label": "feat", "description": "A new feature" },
        { "label": "fix", "description": "A bug fix" },
        {
          "label": "perf",
          "description": "A code change that improves performance"
        },
        {
          "label": "refactor",
          "description": "A code change that neither fixes a bug nor adds a feature"
        },
        { "label": "revert" },
        {
          "label": "style",
          "description": "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"
        },
        {
          "label": "test",
          "description": "Adding missing tests or correcting existing tests"
        },
        { "label": "plan", "description": "Plan Update (기획 변경)" },
        { "label": "server", "description": "Server Update (서버 변경)" }
      ]
    },
    {
      "label": "Scope", // 커밋의 범위 설정
      "name": "scope",
      "description": "A scope may be provided to a commit’s type, to provide additional contextual information and is contained within parenthesis, e.g., \"feat(parser): add ability to parse arrays\".", // 예시 설명
      "type": "text",
      "multiline": false,
      "prefix": "(",
      "suffix": ")"
    },
    {
      "label": "Short description", // 커밋 메시지의 짧은 설명
      "name": "description",
      "description": "Short description in the subject line.", // 설명 텍스트
      "type": "text",
      "multiline": false
    },
    {
      "label": "Body", // 커밋 메시지의 본문
      "name": "body",
      "description": "Optional body", // 본문 내용(선택적)
      "type": "text",
      "multiline": true,
      "lines": 5,
      "maxLines": 10
    },
    {
      "label": "Breaking change", // Breaking Change 여부
      "name": "breaking_change",
      "type": "boolean",
      "value": "BREAKING CHANGE: ",
      "default": false
    },
    {
      "label": "Footer", // 커밋 메시지의 추가 내용
      "name": "footer",
      "description": "Optional footer", // 추가적인 설명(선택적)
      "type": "text",
      "multiline": true
    }
  ],

  // git checkout Type 설정
  "git.checkoutType": ["remote", "tags"]
}
